service: apiDbMagic
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs16.x
  region: eu-west-1
  stage: ${opt:stage, 'dev'}    
  # iam:
  #   role:
  #     statements:
  #       - Effect: Allow
  #         Action:
  #           - dynamodb:*
  #         Resource: 'arn:aws:dynamodb:eu-west-1:*:*'
  environment:
    USERS_TABLE: ${self:custom.tableName}
    STAGE: ${self:provider.stage}    
    TABLE_CARDS: ${self:custom.tableName}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: 'arn:aws:dynamodb:eu-west-1:*:*'

functions:
  api:
    handler: handler.handler
    events:
      - httpApi: '*'
    #environment:
      #TABLE_CARDS: ${self:custom.tableName}
  task:
    handler: task.main
    events:
      - schedule: cron(30 21 * * ? *)
      #1h menos

    environment:
      MGC_COLLECTIONS: 'IKO;GRN;ISD'
      URL_API: https://api.scryfall.com/cards/search
      #TABLE_CARDS: ${self:custom.tableName}

resources:
  Resources:
    cardTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          # - AttributeName: set
          #   AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          # - AttributeName: set
          #   KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tableName}
        
custom:
  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
  tableName: 'cards-${sls:stage}'

plugins:
  - serverless-dynamodb-local
  - serverless-offline