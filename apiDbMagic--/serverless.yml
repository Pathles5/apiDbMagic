service: apiDbMagic
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs16.x
  region: eu-west-1
  stage: ${opt:stage, 'dev'}    
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [ UsersTable, Arn ]
  environment:
    USERS_TABLE: ${self:custom.tableName}
    STAGE: ${self:provider.stage}    

functions:
  api:
    handler: handler.handler
    events:
      - httpApi: '*'
    environment:
      MGC_COLLECTIONS: 'IKO;GRN;ISD'
      URL_API: https://api.scryfall.com/cards/search
  task:
    handler: handler.task
    event:
      - httpApi:
          path: /task
          method: get
    environment:
      MGC_COLLECTIONS: 'IKO;GRN;ISD'

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tableName}
        
custom:
  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
  tableName: 'users-table-${sls:stage}'

plugins:
  - serverless-dynamodb-local
  - serverless-offline